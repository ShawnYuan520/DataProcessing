# 使用python语言进行数据加工
import pandas as pd
import os
from tkinter import Tk
from tkinter.filedialog import askopenfilename, asksaveasfilename



def create_indicator_sheets(input_file, output_file):
    """
    为每个城市群的每个指标创建随时间变化的折线图数据工作表
    """
    # 读取原始Excel文件
    xls = pd.ExcelFile(input_file)

    # 创建新的Excel写入器
    with pd.ExcelWriter(output_file, engine='openpyxl') as writer:

        sheet_count = 0  # 记录成功创建的工作表数量

        # 遍历每个城市群工作表
        for sheet_name in xls.sheet_names:
            print(f"处理城市群: {sheet_name}")

            try:
                # 读取当前城市群数据
                df = pd.read_excel(xls, sheet_name=sheet_name)

                # 打印列名以便调试
                print(f"  列名: {list(df.columns)}")

                # 检查必需的列是否存在
                if '年份' not in df.columns:
                    # 尝试找到年份列的可能名称
                    year_cols = [col for col in df.columns if '年' in col]
                    if year_cols:
                        print(f"  警告: 未找到'年份'列，使用 '{year_cols[0]}' 作为年份列")
                        df = df.rename(columns={year_cols[0]: '年份'})
                    else:
                        print(f"  错误: 在 {sheet_name} 中找不到年份列，跳过此工作表")
                        continue

                if '城市' not in df.columns:
                    # 尝试找到城市列的可能名称
                    city_cols = [col for col in df.columns if '城市' in col or '地区' in col or '市' in col]
                    if city_cols:
                        print(f"  警告: 未找到'城市'列，使用 '{city_cols[0]}' 作为城市列")
                        df = df.rename(columns={city_cols[0]: '城市'})
                    else:
                        print(f"  错误: 在 {sheet_name} 中找不到城市列，跳过此工作表")
                        continue

                # 获取指标列（从第3列开始，但需要排除年份和城市列）
                excluded_cols = ['年份', '城市']
                indicator_columns = [col for col in df.columns[2:] if col not in excluded_cols]

                print(f"  找到 {len(indicator_columns)} 个指标")

                # 为每个指标创建新的工作表
                for indicator in indicator_columns:
                    try:
                        # 创建工作表名称（确保不超过Excel限制）
                        new_sheet_name = f"{sheet_name}_{indicator}"[:31]

                        # 创建适合折线图的数据格式
                        # 行：年份，列：城市
                        pivot_data = df.pivot_table(
                            index='年份',
                            columns='城市',
                            values=indicator,
                            aggfunc='first'  # 如果有重复，取第一个值
                        )

                        # 重置索引，让年份成为普通列
                        pivot_data.reset_index(inplace=True)

                        # 保存到新的工作表
                        pivot_data.to_excel(
                            writer,
                            sheet_name=new_sheet_name,
                            index=False
                        )

                        sheet_count += 1
                        print(f"    创建工作表: {new_sheet_name}")

                    except Exception as e:
                        print(f"    错误: 创建指标 '{indicator}' 的工作表失败 - {str(e)}")
                        continue

            except Exception as e:
                print(f"  错误: 处理工作表 {sheet_name} 失败 - {str(e)}")
                continue

        # 如果没有任何工作表被创建，创建一个空的工作表避免错误
        if sheet_count == 0:
            empty_df = pd.DataFrame({'消息': ['没有成功创建任何工作表，请检查数据格式']})
            empty_df.to_excel(writer, sheet_name='错误信息', index=False)
            print("创建了空工作表以避免Excel错误")

    print(f"完成！共生成 {sheet_count} 个工作表")
    print(f"输出文件: {output_file}")


# 使用文件对话框选择文件
if __name__ == "__main__":
    # 创建隐藏的Tkinter窗口
    Tk().withdraw()

    print("请选择输入文件...")
    input_file = askopenfilename(
        title="选择经济指标Excel文件",
        filetypes=[("Excel files", "*.xlsx"), ("All files", "*.*")]
    )

    if not input_file:
        print("未选择文件，程序退出")
        exit()

    print("请选择输出文件位置...")
    output_file = asksaveasfilename(
        title="保存输出文件",
        defaultextension=".xlsx",
        filetypes=[("Excel files", "*.xlsx")],
        initialfile="城市群指标_折线图数据.xlsx"
    )

    if not output_file:
        print("未选择输出位置，程序退出")
        exit()

    # 执行处理
    create_indicator_sheets(input_file, output_file)





